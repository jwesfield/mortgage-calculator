{"version":3,"sources":["logo.svg","components/SlideInput/SlideInput.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Text","Typography","pFormatter","value","pParser","replace","cFormatter","cParser","SlideInput","props","onChange","setInputValue","localStorage","setItem","storage","onChangePercent","setPercent","home","span","strong","min","percent","max","step","inputValue","className","style","margin","formatter","parser","disabled","boxes","type","getTotal","tax","lawyer","agent","other","res","parseInt","e","App","useState","getItem","setHome","setTax","tax_percent","setTax_percent","setAgent","agent_percent","setAgent_percent","setLawyer","lawyer_percent","setLawyer_percent","setOther","title","prefix","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba628e10.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport './SlideInput.css';\nimport { Slider, InputNumber, Row, Col, Typography, Divider } from 'antd';\nconst { Text } = Typography;\n\nfunction SlideInput(props) {\n\n  function onChange(value) {\n    props.setInputValue(value);\n    localStorage.setItem(props.storage, value);\n  }\n\n  function onChangePercent(value) {\n    props.setPercent(value);\n    props.setInputValue(props.home * (value / 100));\n    localStorage.setItem(props.storage + '_percent', value);\n    localStorage.setItem(props.storage, props.home * (value / 100));\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col span={4}>\n          <Text strong>{props.storage}</Text>\n        </Col>\n        <Col span={8}>\n          <Slider\n            min={props.percent ? 0 : props.min}\n            max={props.percent ? 10 : props.max}\n            step={props.percent ? 0.5 : props.step}\n            onChange={props.percent ? onChangePercent : onChange}\n            value={props.percent ? props.percent : props.inputValue}\n          />\n        </Col>\n        <Col span={3}>\n          <InputNumber\n            className=\"inputCurrency\"\n            min={props.min || 0}\n            max={props.max || 100}\n            step={props.step || 1}\n            style={{ margin: '0 16px' }}\n            value={props.inputValue}\n            onChange={onChange}\n            formatter={cFormatter}\n            parser={cParser}\n            disabled={!props.boxes[0]}\n          />\n        </Col>\n        <Col span={3}>\n          {props.boxes[1] == true ? (\n            <InputNumber\n              min={0}\n              max={10}\n              step={0.5}\n              style={{ margin: '0 16px' }}\n              value={props.percent}\n              onChange={onChangePercent}\n              formatter={pFormatter}\n              parser={pParser}\n            />\n          ) : null}\n        </Col>\n      </Row>\n      <Divider type=\"horizontal\" />\n    </div>\n  );\n}\n\nfunction pFormatter(value) {\n  return `${value}%`;\n}\nfunction pParser(value) {\n  return value.replace('%', '');\n}\n\nfunction cFormatter(value) {\n  return `₪ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\nfunction cParser(value) {\n  return value.replace(/\\₪\\s?|(,*)/g, '');\n  //return value.replace('₪', '');\n}\n\nexport default SlideInput;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { DatePicker, Divider, Statistic } from 'antd';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport SlideInput from './components/SlideInput/SlideInput';\nfunction App() {\n\n  const [home, setHome] = useState(localStorage.getItem('home') || 0);\n  const [tax, setTax] = useState(localStorage.getItem('tax') || 0);\n  const [tax_percent, setTax_percent] = useState(localStorage.getItem('tax_percent') || 0)\n  const [agent, setAgent] = useState(localStorage.getItem('agent') || 0);\n  const [agent_percent, setAgent_percent] = useState(localStorage.getItem('agent_percent') || 0);\n  const [lawyer, setLawyer] = useState(localStorage.getItem('lawyer') || 0);\n  const [lawyer_percent, setLawyer_percent] = useState(localStorage.getItem('lawyer_percent') || 0);\n  const [other, setOther] = useState(localStorage.getItem('other') || 0);\n\n  const [downpayment, setDownpayment] = useState(\n    localStorage.getItem('downpayment') || 1\n  );\n  const [mortgage, setMortgage] = useState(\n    localStorage.getItem('mortgage') || 1\n  );\n  const [rate, setRate] = useState(localStorage.getItem('rate') || 1);\n  const [years, setYears] = useState(localStorage.getItem('years') || 1);\n\nfunction homeChanged(value){\n  setHome(value);\n  setTax(value * (tax_percent / 100))\n  setAgent(value * (agent_percent / 100))\n  setLawyer(value * (lawyer_percent / 100))\n}\n\n  return (\n    <div className=\"App\">\n      <Divider type=\"horizontal\" />\n      <SlideInput\n        boxes={[true, false]}\n        inputValue={home}\n        setInputValue={homeChanged}\n        min={1500000}\n        max={4000000}\n        step={50000}\n        storage={'home'}\n      />\n\n      <SlideInput\n        home={home}\n        boxes={[false, true]}\n        inputValue={tax}\n        setInputValue={setTax}\n        min={0}\n        max={4000000}\n        step={0.5}\n        storage={'tax'}\n        percent={tax_percent}\n        setPercent={setTax_percent}\n      />\n      <SlideInput\n        home={home}\n        boxes={[false, true]}\n        inputValue={agent}\n        setInputValue={setAgent}\n        min={0}\n        max={4000000}\n        step={0.5}\n        storage={'agent'}\n        percent={agent_percent}\n        setPercent={setAgent_percent}\n      />\n      <SlideInput\n        home={home}\n        boxes={[false, true]}\n        inputValue={lawyer}\n        setInputValue={setLawyer}\n        min={0}\n        max={4000000}\n        step={0.5}\n        storage={'lawyer'}\n        percent={lawyer_percent}\n        setPercent={setLawyer_percent}\n      />\n      <SlideInput\n        boxes={[true, false]}\n        inputValue={other}\n        setInputValue={setOther}\n        min={0}\n        max={200000}\n        step={1000}\n        storage={'other'}\n      />\n      <Statistic title=\"Total\" value={getTotal(home,tax,lawyer,agent,other)} prefix={\"$\"} />\n\n    </div>\n  );\n}\n\n\nfunction getTotal(home,tax,lawyer,agent,other){\n  var res = 0 ;\n  try {\n    res = parseInt(home) + parseInt(tax) + parseInt(lawyer) + parseInt(agent) + parseInt(other)\n  } catch(e){\n\n  }\nreturn res;\n}\nexport default App;\n\n//https://dev.to/yuribenjamin/how-to-deploy-react-app-in-github-pages-2a1f\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}